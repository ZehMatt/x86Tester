# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.25)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(x86Tester)

# Subdirectory: thirdparty
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/thirdparty")
else()
	set(CMAKE_FOLDER thirdparty)
endif()
add_subdirectory(thirdparty)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: x86Tester-sandbox
set(x86Tester-sandbox_SOURCES
	cmake.toml
	"src/sandbox/main.cpp"
)

add_executable(x86Tester-sandbox)

target_sources(x86Tester-sandbox PRIVATE ${x86Tester-sandbox_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${x86Tester-sandbox_SOURCES})

target_compile_features(x86Tester-sandbox PRIVATE
	cxx_std_23
)

if(MSVC) # msvc
	target_compile_options(x86Tester-sandbox PRIVATE
		"/Ob2"
		"/Oi"
	)
endif()

if(MSVC) # msvc
	target_link_options(x86Tester-sandbox PRIVATE
		"/NODEFAULTLIB"
		"/ENTRY:rawEntry"
		"/DYNAMICBASE:NO"
		"/BASE:0x70000000"
	)
endif()

set_target_properties(x86Tester-sandbox PROPERTIES
	PROJECT_LABEL
		sandbox
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT x86Tester-sandbox)
endif()

# Target: x86Tester-core
set(x86Tester-core_SOURCES
	cmake.toml
	"include/x86Tester/logging.hpp"
	"src/core/logging.cpp"
)

add_library(x86Tester-core STATIC)

target_sources(x86Tester-core PRIVATE ${x86Tester-core_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${x86Tester-core_SOURCES})

add_library(x86Tester::core ALIAS x86Tester-core)
target_compile_features(x86Tester-core PUBLIC
	cxx_std_23
)

target_include_directories(x86Tester-core PUBLIC
	include
)

target_include_directories(x86Tester-core PRIVATE
	"src/core"
)

target_link_libraries(x86Tester-core PUBLIC
	Zydis
	sfl
)

set_target_properties(x86Tester-core PROPERTIES
	PROJECT_LABEL
		core
)

# Target: x86Tester-execution
set(x86Tester-execution_SOURCES
	cmake.toml
	"include/x86Tester/execution.hpp"
	"src/execution/execution.cpp"
)

add_library(x86Tester-execution STATIC)

target_sources(x86Tester-execution PRIVATE ${x86Tester-execution_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${x86Tester-execution_SOURCES})

add_library(x86Tester::execution ALIAS x86Tester-execution)
target_compile_features(x86Tester-execution PUBLIC
	cxx_std_23
)

target_include_directories(x86Tester-execution PUBLIC
	include
)

target_include_directories(x86Tester-execution PRIVATE
	"src/execution"
	"include/x86Tester"
)

target_link_libraries(x86Tester-execution PUBLIC
	x86Tester::core
)

set_target_properties(x86Tester-execution PROPERTIES
	PROJECT_LABEL
		execution
)

# Target: x86Tester-generator
set(x86Tester-generator_SOURCES
	cmake.toml
	"include/x86Tester/basegenerator.hpp"
	"include/x86Tester/generator.hpp"
	"include/x86Tester/inputgenerator.hpp"
	"src/generator/generator.cpp"
)

add_library(x86Tester-generator STATIC)

target_sources(x86Tester-generator PRIVATE ${x86Tester-generator_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${x86Tester-generator_SOURCES})

add_library(x86Tester::generator ALIAS x86Tester-generator)
target_compile_features(x86Tester-generator PUBLIC
	cxx_std_23
)

target_include_directories(x86Tester-generator PUBLIC
	include
)

target_include_directories(x86Tester-generator PRIVATE
	"src/generator"
	"include/x86Tester"
)

target_link_libraries(x86Tester-generator PUBLIC
	x86Tester::core
)

set_target_properties(x86Tester-generator PROPERTIES
	PROJECT_LABEL
		generator
)

# Target: x86Tester-cli
set(x86Tester-cli_SOURCES
	cmake.toml
	"src/cli/main.cpp"
	"src/cli/utils.hpp"
)

add_executable(x86Tester-cli)

target_sources(x86Tester-cli PRIVATE ${x86Tester-cli_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${x86Tester-cli_SOURCES})

target_compile_features(x86Tester-cli PRIVATE
	cxx_std_23
)

target_link_libraries(x86Tester-cli PRIVATE
	x86Tester::core
	x86Tester::generator
	x86Tester::execution
)

set_target_properties(x86Tester-cli PROPERTIES
	PROJECT_LABEL
		cli
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT x86Tester-cli)
endif()
